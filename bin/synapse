#!/usr/bin/env ruby

require 'yaml'
require 'optparse'
require 'erb'

require 'synapse'

options={}

# set command line options
optparse = OptionParser.new do |opts|
  opts.banner =<<-EOB
Welcome to synapse

Usage: synapse --config /path/to/synapse/config
  EOB

  options[:config] = ENV['SYNAPSE_CONFIG']
  opts.on('-c config','--config config', String, 'path to synapse config') do |key,value|
    options[:config] = key
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end
end

# parse command line arguments
optparse.parse!

def parseconfig(filename)
  # parse synapse config file
  begin
    c = YAML::parse(ERB.new(File.read(filename)).result)
  rescue Errno::ENOENT => e
    raise ArgumentError, "config file does not exist:\n#{e.inspect}"
  rescue Errno::EACCES => e
    raise ArgumentError, "could not open config file:\n#{e.inspect}"
  rescue YAML::SyntaxError => e
    raise "config file #{filename} is not yaml:\n#{e.inspect}"
  rescue SyntaxError => e
    raise SyntaxError, "ERB syntax error in config file #{filename}:\n#{e.inspect}"
  rescue
    puts "failed to parse config file #{filename}"
    raise
  end
  return c.to_ruby
end

config = parseconfig(options[:config])
config['services'] ||= {}

if config.has_key?('service_conf_dir')
  cdir = File.expand_path(config['service_conf_dir'])
  if ! Dir.exists?(cdir)
    raise "service conf dir does not exist:#{cdir}"
  end
  cfiles = Dir.glob(File.join(cdir, '*.{json,yaml}'))
  cfiles.each { |x| config['services'][File.basename(x[/(.*)\.(json|yaml)$/, 1])] = parseconfig(x) }
end

# run synapse

loop do
  s = Synapse::Synapse.new(config)
  begin
    s.run
    break # Exit normally
  rescue SystemExit, SignalException
    break # Exit upon exit or signal
  rescue Exception => e
    puts "Caught exception at top level: #{e.inspect}"
    puts "Cleaning up all threads"
    Thread.list.each do |thread|
      thread.exit unless thread == Thread.current
      puts "Exited thread #{thread.inspect}"
    end
  end
end

puts "synapse has exited"
